{"version":3,"file":"static/js/746.d9412d3c.chunk.js","mappings":"sPAGe,SAASA,EAAT,GAAuC,IAAlBC,EAAiB,EAAjBA,cAClC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAcA,OACE,+BACE,kBAAMC,aAAa,MAAMC,SAdR,SAAAC,GACnBA,EAAEC,iBACa,OAAXL,GAGJF,EAAcE,EACf,EAQG,WACE,oDACA,kBAAOM,KAAK,OAAOC,MAAOP,EAAQQ,SARd,SAAAJ,GACxBH,EAAUG,EAAEK,OAAOF,MAAMG,OAC1B,KAOK,mBAAQJ,KAAK,SAAb,wBAIP,C,qBCtBc,SAASK,IAAU,IAAD,EAC/B,GAAkCZ,EAAAA,EAAAA,UAAS,IAA3C,eAAOa,EAAP,KAAkBC,EAAlB,KAEA,GAAwCC,EAAAA,EAAAA,IAAgB,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAY,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,UAC5CC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,mCAAG,WAAMJ,GAAN,2FAEdK,EAAAA,EAAAA,IAAkBL,GAAcM,MAAK,SAAAC,GAAG,OAC5CX,EAAaW,EAAIC,KAAKC,QADsB,IAF1B,sDAMpBC,QAAQC,IAAR,MANoB,wDAAH,uDAUrBC,EAAAA,EAAAA,YAAU,WACa,KAAjBZ,GAGJI,EAAgBJ,EACjB,GAAE,CAACA,IAaJ,OACE,iCACE,SAACpB,EAAD,CAAWC,cAbO,SAAAgC,GACpB,GAAIA,IAAab,EACf,OAAOc,MAAM,2BAEE,KAAbD,EAIJd,EAAgB,CAAEgB,MAAOF,IAHvBjB,EAAa,GAIhB,KAKG,0BACE,+BACGD,QADH,IACGA,OADH,EACGA,EAAWqB,KAAI,SAAAC,GACd,OACE,yBACE,SAAC,KAAD,CACEC,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMnB,GAFjB,SAKGe,EAAMK,OAFFL,EAAME,KAJNF,EAAME,GAUlB,UAKV,C,uNC7DKI,EAAW,gCACXC,EAAM,mCACCC,EAAe,8BAEfC,EAAmB,mCAAG,8FAC3BC,EAAAA,EAAAA,IAAA,UACDJ,EADC,sCACqCC,EADrC,oBAD2B,mFAAH,qDAKnBI,EAAe,mCAAG,WAAMC,GAAN,iFACvBF,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,iBAA8BM,EAA9B,oBAAiDL,EAAjD,oBADuB,mFAAH,sDAGfM,EAAiB,mCAAG,WAAMD,GAAN,iFACzBF,EAAAA,EAAAA,IAAA,UACDJ,EADC,iBACgBM,EADhB,4BAC2CL,EAD3C,oBADyB,mFAAH,sDAKjBO,EAAc,mCAAG,WAAMF,GAAN,iFACtBF,EAAAA,EAAAA,IAAA,UACDJ,EADC,iBACgBM,EADhB,4BAC2CL,EAD3C,oBADsB,mFAAH,sDAKdnB,EAAiB,mCAAG,WAAMY,GAAN,iFACzBU,EAAAA,EAAAA,IAAA,UACDJ,EADC,iCACgCC,EADhC,iCAC4DP,IAFnC,mFAAH,qD","sources":["components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx","services/MoviesAPI.jsx"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function SearchBar({ onChangeQuery }) {\n  const [search, setSearch] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (search === null) {\n      return;\n    }\n    onChangeQuery(search);\n  };\n\n  const handleInputChange = e => {\n    setSearch(e.target.value.trim());\n  };\n\n  return (\n    <>\n      <form autoComplete=\"off\" onSubmit={handleSubmit}>\n        <p>Enter you're movie name</p>\n        <input type=\"text\" value={search} onChange={handleInputChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n}\n\nSearchBar.propTypes = {\n  onChangeQuery: PropTypes.func,\n};\n","import { fetchSearchMovies } from 'services/MoviesAPI';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nexport default function Movies() {\n  const [movieList, setMovieList] = useState([]);\n\n  const [searchParams, setSearchParams] = useSearchParams('');\n\n  const currentQuery = searchParams.get('query') ?? '/movies';\n  const location = useLocation();\n\n  const getSearchMovies = async currentQuery => {\n    try {\n      await fetchSearchMovies(currentQuery).then(res =>\n        setMovieList(res.data.results)\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (currentQuery === '') {\n      return;\n    }\n    getSearchMovies(currentQuery);\n  }, [currentQuery]);\n\n  const onQueryChange = newQuery => {\n    if (newQuery === currentQuery) {\n      return alert('This film already found');\n    }\n    if (newQuery === '') {\n      setMovieList([]);\n      return;\n    }\n    setSearchParams({ query: newQuery });\n  };\n\n  return (\n    <>\n      <SearchBar onChangeQuery={onQueryChange} />\n      <div>\n        <ul>\n          {movieList?.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link\n                  to={`/movies/${movie.id}`}\n                  state={{ from: location }}\n                  key={movie.id}\n                >\n                  {movie.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f3e1ed456186eb8f418c2248d99e5eff';\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/';\n\nexport const fetchTrendingMovies = async () =>\n  await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}&language=en-US`\n  );\n\nexport const fetchMoviesById = async movieId =>\n  await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n\nexport const fetchMovieReviews = async movieId =>\n  await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n  );\n\nexport const fetchMovieCast = async movieId =>\n  await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n\nexport const fetchSearchMovies = async movie =>\n  await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&query=${movie}`\n  );\n"],"names":["SearchBar","onChangeQuery","useState","search","setSearch","autoComplete","onSubmit","e","preventDefault","type","value","onChange","target","trim","Movies","movieList","setMovieList","useSearchParams","searchParams","setSearchParams","currentQuery","get","location","useLocation","getSearchMovies","fetchSearchMovies","then","res","data","results","console","log","useEffect","newQuery","alert","query","map","movie","to","id","state","from","title","BASE_URL","KEY","BASE_IMG_URL","fetchTrendingMovies","axios","fetchMoviesById","movieId","fetchMovieReviews","fetchMovieCast"],"sourceRoot":""}